/*
* Copyright (c) 2005 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  Resource file for General Settings
*
*/



//  RESOURCE IDENTIFIER
NAME    DISP // 4 letter ID

//  INCLUDES
#include    "GsDisplayPlugin.hrh"
#include    <gsdisplplugin.loc>

#include    <gs.loc>
#include    <gscommon.rh>

#include    <appinfo.rh>
#include    <avkon.loc>
#include    <avkon.mbg>
#include    <avkon.rsg>
#include    <AvkonIcons.hrh>
#include    <bldvariant.hrh>
#include    <data_caging_paths_strings.hrh>
#include    <eikcore.rsg>
#include    <eikon.rsg>
#include    <uikon.rh>
#include    <gsapp.rsg>
#include    <drmcommon.loc>


// CONSTANTS

//  RESOURCE DEFINITIONS 

RESOURCE RSS_SIGNATURE
    {
    }

// Common resources among GS
#include    "GSCommonResources.rss"


RESOURCE TBUF
    {
    buf="DISP";
    }

//----------------------------------------------------
//   
//    EIK_APP_INFO
//    It contains application information.
//
//----------------------------------------------------
//
RESOURCE EIK_APP_INFO
    {
    }


// **COMMON RESOURCES

//----------------------------------------------------
//   
//    r_not_enough_memory_query
//    Not enough memory note.
//
//----------------------------------------------------
//
RESOURCE DIALOG r_not_enough_memory_query
    {
    flags = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_OK_EMPTY__OK;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_CONFIRMATION_QUERY 
                { 
                layout = EConfirmationQueryLayout;
                label = qtn_memlo_not_enough_memory;
                };
            }
        };
    }

//----------------------------------------------------
//   
//    r_image_load_wait_note
//    Image loading wait note.
//
//----------------------------------------------------
//
RESOURCE DIALOG r_image_load_wait_note
    {
    flags = EAknWaitNoteFlags;
    buttons = R_AVKON_SOFTKEYS_EMPTY;
    items =
        {
        DLG_LINE
            {
            type = EAknCtNote;
            id = EImageLoadWaitNote;
            control= AVKON_NOTE 
                { 
                layout = EWaitLayout;
                singular_label = qtn_set_loading_image;
                imagefile = AVKON_ICON_FILE;
                imageid = EMbmAvkonQgn_note_progress;
                imagemask = EMbmAvkonQgn_note_progress_mask;
                animation = R_QGN_GRAF_WAIT_BAR_ANIM;
                };
            }
        };
    }


//----------------------------------------------------
//   
//    r_gs_image_corrupted
//    Image corrupted information note.
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_image_corrupted 
    {
    buf = qtn_set_image_format_wrong;
    }

//----------------------------------------------------
//   
//    r_gs_image_too_large
//    Image corrupted information note.
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_image_too_large 
    {
    buf = qtn_set_image_too_large;
    }


//----------------------------------------------------
//  r_gs_display_view_caption
// 
// Display view caption for plugin
//----------------------------------------------------
//
RESOURCE TBUF r_gs_display_view_caption
    {
    buf = qtn_set_device_display;
    }


// **DISPLAY VIEW

//----------------------------------------------------
//   
//    r_gs_display_view_title
//    Display view's title.
//
//----------------------------------------------------
//
RESOURCE TITLE_PANE r_gs_display_view_title
    {
    txt = qtn_set_title_display;        
    }


//----------------------------------------------------
//   
//    r_gs_displ_view
//    Display view.
//
//----------------------------------------------------
//
RESOURCE AVKON_VIEW r_gs_displ_view
    {
    menubar = r_gs_menubar_change_exit;  
    cba = R_GS_SOFTKEYS_OPTIONS_BACK_CHANGE;
    }

//----------------------------------------------------
//    
//    r_displ_lbx    
//    Display view's listbox.
//
//----------------------------------------------------
//
RESOURCE GS_FEATURE_ARRAY r_displ_lbx
    {
    items =
        {
        GS_FEATURE
            {
            // the current value is a slider bitmap (1. icon in the icon array)
            txt = " \t"qtn_set_display_contrast"\t0";
            item = EGSSettIdContrast;
            type = EGSListBoxItemTypeIsDynamic;
            },        
        GS_FEATURE
            {
            // the current value is a slider bitmap (1. icon in the icon array)
            txt = " \t"qtn_set_disp_brightness"\t1";
            item = EGSSettIdBrightness;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            // the current value is a slider bitmap (1. icon in the icon array)
            txt = " \t"qtn_set_light_sensor_mode"\t2";
            item = EGSSettIdAmbientLightSensor;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            txt = " \t"qtn_set_disp_text_size"\t\t";
            item = EGSSettIdDisplayTextSize;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            txt = " \t"qtn_sanim_time_out"\t\t"; 
            item = EGSSettIdSSP;
            type = EGSListBoxItemTypeIsDynamic;            
            },
        GS_FEATURE
            {
            txt = " \t"qtn_sanim_object"\t\t";
            item = EGSSettIdSSO;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            txt = " \t"qtn_set_uwn"\t\t";
            item = EGSSettIdWNI;
            },
        GS_FEATURE
            {
            txt = " \t"qtn_sanim_objec_power_save_led"\t\t";
            item = EGSSettIdPowerSaveLed;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            txt = " \t"qtn_set_light_time"\t\t"; 
            item = EGSSettIdBacklight;            
            },
        GS_FEATURE
            {
            txt = "\t"qtn_set_oper_logo"\t\t";
            item = EGSSettIdOperatorLogo;
            type = EGSListBoxItemTypeIsDynamic;
            }
        };    
    }


// **CONTRAST

//----------------------------------------------------
//    
//    r_contrast_slider    
//    Contrast slider.
//
//----------------------------------------------------
//
RESOURCE SLIDER r_contrast_slider 
    {
    layout = EAknSettingsItemSliderLayoutWithGraphics;
    minvalue = -15;
    maxvalue = 15;
    step = 1;
    valuetype = EAknSliderValuePercentage;
    minlabel = qtn_set_contrast_light;
    maxlabel = qtn_set_contrast_dark;
    }

//----------------------------------------------------
//    
//    r_contrast_setting_page    
//    Contrast setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_contrast_setting_page
    { 
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_display_contrast;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknCtSlider;
    editor_resource_id = r_contrast_slider;
    }


// **BRIGHTNESS

//----------------------------------------------------
//    
//    r_brightness_slider    
//    Brightness slider.
//
//----------------------------------------------------
//
RESOURCE SLIDER r_brightness_slider 
    {
    layout = EAknSettingsItemSliderLayoutWithGraphics;
    minvalue = 1;
    maxvalue = 31;
    step = 1;
    valuetype = EAknSliderValuePercentage;
    minlabel = qtn_set_brightness_dark;
    maxlabel = qtn_set_brightness_bright;
    }

//----------------------------------------------------
//    
//    r_brightness_setting_page    
//    Brightness setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_brightness_setting_page
    { 
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_disp_brightness;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknCtSlider;
    editor_resource_id = r_brightness_slider;
    }


// **AMBIENT LIGHT SENSOR

//----------------------------------------------------
//    
//    r_ambient_light_sensor_slider    
//    Ambient Light Sensor slider.
//
//----------------------------------------------------
//
RESOURCE SLIDER r_ambient_light_sensor_slider 
    {
    layout = EAknSettingsItemSliderLayoutWithGraphics;
    minvalue = 1;
    maxvalue = 5;
    step = 1;
    valuetype = EAknSliderValuePercentage;
    minlabel = qtn_set_light_sensor_dark;
    maxlabel = qtn_set_light_sensor_bright;
    }

//----------------------------------------------------
//    
//    r_ambient_light_sensor_setting_page    
//    Ambient Light Sensor setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_ambient_light_sensor_setting_page
    { 
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_light_sensor_mode;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknCtSlider;
    editor_resource_id = r_ambient_light_sensor_slider;
    }


// **SCREEN SAVER

//----------------------------------------------------
//    
//    r_setting_screen_saver_slider    
//    Screen saver time setting slider
//
//----------------------------------------------------
//
RESOURCE SLIDER r_setting_screen_saver_slider 
    {
    layout = EAknSettingsItemSliderLayout;
    minvalue = 1;
    maxvalue = 30;
    step = 1;
    valuetype = EAknSliderValueBareFigure;
    minlabel = qtn_sanim_time_out_slider_min_value;
    maxlabel = qtn_sanim_time_out_slider_max_value;
    valuelabel = qtn_sanim_time_out_slider_cur_value;
    singular_valuelabel = qtn_sanim_time_out_slider_cur_value_singular;
    }

//----------------------------------------------------
//    
//    r_screen_saver_period_setting_page    
//    Screen saver period setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_screen_saver_period_setting_page
    { 
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_sanim_time_out;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknCtSlider;
    editor_resource_id = r_setting_screen_saver_slider;
    }


//  **BACKLIGHT TIMEOUT

//----------------------------------------------------
//    
//    r_setting_backlight_slider    
//    Backlight timeout setting slider
//
//----------------------------------------------------
//
RESOURCE SLIDER r_setting_backlight_slider 
    {
    layout = EAknSettingsItemSliderLayout;
    minvalue = 5;
    maxvalue = 60;
    step = 5;
    valuetype = EAknSliderValueBareFigure;
    singular_valuelabel = qtn_backlight_time_out_slider_cur;
    minlabel = qtn_backlight_time_out_slider_min;
    maxlabel = qtn_backlight_time_out_slider_max;
    valuelabel = qtn_backlight_time_out_slider_cur; 
    }

//----------------------------------------------------
//    
//    r_backlight_period_setting_page    
//    Backlight period setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_backlight_period_setting_page
    { 
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_light_time;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknCtSlider;
    editor_resource_id = r_setting_backlight_slider;
    }


// **DISPLAY TEXT SIZE

//----------------------------------------------------
//    
//    r_display_text_size_setting_page
//    Display text size setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_display_text_size_setting_page
    {
    number = EAknSettingPageNoOrdinalDisplayed; 
    label = qtn_set_disp_text_size;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknSetListBox;
    editor_resource_id = r_setting_listbox;
    }

//----------------------------------------------------
//    
//    r_display_text_size_setting_page_lbx
//    Display text size setting page's listbox.
//
//----------------------------------------------------
//
RESOURCE ARRAY r_display_text_size_setting_page_lbx
    {
    items =
        {
        LBUF
            {
            txt = qtn_set_disp_text_size_large;
            },
        LBUF
            {
            txt = qtn_set_disp_text_size_normal;
            },
        LBUF
            {
            txt = qtn_set_disp_text_size_small;
            }
        };
    }


// **WELCOME NOTE SETTING PAGE

//----------------------------------------------------
//    
//    r_welcome_note_setting_page   
//    Welcome note setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_welcome_note_setting_page
    { 
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_uwn;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknSetListBox;
    editor_resource_id = r_setting_listbox;
    }

//----------------------------------------------------
//    
//    r_welcome_note_text_query    
//    Welcome note text query.
//
//----------------------------------------------------
//
RESOURCE DIALOG r_welcome_note_text_query
    {
    flags = EAknDialogGenericQueryFlags | EEikDialogFlagNoShadow;
    buttons = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            itemflags=EEikDlgItemTakesEnterKey;
            control = AVKON_DATA_QUERY
                { 
                layout = EDataLayout;
                label = qtn_set_uwn_enter_text;
                control = EDWIN
                    {
                    flags=0;
                    width=5;
                    lines=5;
                    maxlength=50;
                    avkon_flags = EAknEditorFlagEnablePictographInput;
                    allowed_input_modes = EAknEditorAllInputModes;
                    default_input_mode = EAknEditorTextInputMode;
                    };
                };
            }
        };
    }

//----------------------------------------------------
//    
//  r_welcome_note_setting_page_lbx
//  Welcome note setting page's listbox.
//
//----------------------------------------------------
//
RESOURCE ARRAY r_welcome_note_setting_page_lbx
    {
    items =
        {
        LBUF
            {
            txt = qtn_set_uwn_default;
            },
        LBUF
            {
            txt = qtn_set_uwn_text;
            },
        LBUF
            {
            txt = qtn_set_uwn_image;
            }
        };
    }


// *BACKGROUND IMAGE

//----------------------------------------------------
//    
//    r_background_image_setting_page   
//    Background image setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_background_image_setting_page
    { 
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_bgimage;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknSetListBox;
    editor_resource_id = r_setting_listbox;
    }

//----------------------------------------------------
//    
//    r_background_image_setting_page_lbx    
//    Background image setting page's listbox.
//
//----------------------------------------------------
//
RESOURCE ARRAY r_background_image_setting_page_lbx
    {
    items =
        {
        LBUF
            {
            txt = qtn_set_bgimage_no;
            },
        LBUF
            {
            txt = qtn_set_bgimage_image;
            }
        };
    }

//----------------------------------------------------
//   
//    r_gs_drm_not_allowed
//    DRM protected image cannot be selected as welcome note iamge.
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_drm_not_allowed
    {
    buf = qtn_drm_not_allowed;
    }
  

// **POWER SAVE LED MODE

//----------------------------------------------------
//    
//    r_power_save_led_setting_page    
//    Power Save LED mode setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_power_save_led_setting_page
    {
    number = EAknSettingPageNoOrdinalDisplayed; 
    label = qtn_sanim_objec_power_save_led;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknSetListBox;
    editor_resource_id = r_setting_listbox;
    }

//----------------------------------------------------
//    
//    r_power_save_led_setting_page_lbx    
//    Power Save LED mode setting page's listbox.
//
//----------------------------------------------------
//
RESOURCE ARRAY r_power_save_led_setting_page_lbx
    {
    items =
        {
        LBUF
            {
            txt = qtn_sanim_power_save_on;
            },
        LBUF
            {
            txt = qtn_sanim_power_save_off;
            }
        };
    }

//----------------------------------------------------
//   
//    r_gs_power_saving_protected_settings_infonote
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_power_saving_protected_settings_infonote
    {
    buf = qtn_power_saving_protected_settings_infonote;
    }

//----------------------------------------------------
//
//    r_gs_operatorlogo_plugin_caption
//    Operator logo Plugin caption.
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_operatorlogo_plugin_caption
    {
    buf = qtn_set_oper_logo;
    }

//----------------------------------------------------
//
//    r_gs_operatorlogo_on_text
//    Operator logo text for operator logo value on.
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_operatorlogo_on_text
    {
    buf = qtn_set_oper_logo_on;
    }

//----------------------------------------------------
//
//    r_gs_operatorlogo_off_text
//    Operator logo text for operator logo value off.
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_operatorlogo_off_text
    {
    buf = qtn_set_oper_logo_off;
    }

//----------------------------------------------------
//    
//    r_operator_logo_setting_page    
//    Operator Logo setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_operator_logo_setting_page
    {
    number = EAknSettingPageNoOrdinalDisplayed; 
    label = qtn_set_oper_logo;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknSetListBox;
    editor_resource_id = r_setting_listbox;
    }

//----------------------------------------------------
//    
//  r_oplogo_on_off_setting_page_lbx 
//  Operator Logo on/off setting page items list box
//
//----------------------------------------------------
//
RESOURCE ARRAY r_oplogo_on_off_setting_page_lbx
    {
    items =
        {
        LBUF
            {
            txt = qtn_set_oper_logo_on;
            },
        LBUF
            {
            txt = qtn_set_oper_logo_off;
            }
        };
    }

//End of File
