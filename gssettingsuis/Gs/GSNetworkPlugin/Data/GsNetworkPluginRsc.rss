/*
* Copyright (c) 2006 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  Resource file for GSNetworkPlugin
*
*/

//  RESOURCE IDENTIFIER
NAME    NETP // 4 letter ID

//  INCLUDES
#include     <bldvariant.hrh>

#include    <gsnetworkplugin.loc>
#include    "GsNetworkPlugin.hrh"

#include    <gs.loc>
#include    <gscommon.hrh>
#include    <gscommon.rh>
#include    <gsapp.rsg>
#include    <appinfo.rh>
#include    <avkon.loc>
#include    <avkon.mbg>
#include    <avkon.rsg>
#include    <AvkonIcons.hrh>
#include    <data_caging_paths_strings.hrh>
#include    <eikcore.rsg>
#include    <eikon.rsg>
#include    <gsnetworkplugin.mbg>
#include    <uikon.rh>

#define KGsNetworkPluginIcons      "Z:"APP_RESOURCE_DIR"\\gsnetworkplugin.mbm"

//  RESOURCE DEFINITIONS

RESOURCE RSS_SIGNATURE
    {
    }


// Common resources among GS
#include    "GSCommonResources.rss"

RESOURCE TBUF
    {
    buf="NET";
    }

//----------------------------------------------------
//
//    EIK_APP_INFO
//    It contains application information.
//
//----------------------------------------------------
//
RESOURCE EIK_APP_INFO
    {
    }
    
//----------------------------------------------------
//
//    r_gs_net_plugin_icon_array
//    Default icons used by the CGSPluginInterface.
//
//----------------------------------------------------
//
/*
RESOURCE AKN_ICON_ARRAY r_gs_net_plugin_icon_array
    {
    bmpfile = KGsNetPluginIcons;

    icons =
        {
        AKN_ICON
            {
            iconId = EMbmGstelpluginQgn_prop_set_network_sub;
            maskId = EMbmGstelpluginQgn_prop_set_network_sub_mask;
            },
        AKN_ICON
            {
            iconId = EMbmGstelpluginQgn_prop_set_network_tab4;
            maskId = EMbmGstelpluginQgn_prop_set_network_tab4_mask;
            }
        };
    }
  */
    
//----------------------------------------------------
//  r_gs_net_view_caption
//
// Network view caption for plugin
//----------------------------------------------------
//
RESOURCE TBUF r_gs_net_view_caption
    {
    buf = qtn_set_folder_network;
    }


//----------------------------------------------------
//  r_gs_net_view_title
//
// Network view title
//----------------------------------------------------
//
RESOURCE TITLE_PANE r_gs_net_view_title
    {
    txt = qtn_set_title_settings_network;
    }


//----------------------------------------------------
//
//    r_gs_net_view
//    Network sub-menu view
//
//----------------------------------------------------
//
RESOURCE AVKON_VIEW r_gs_net_view
    {
    menubar=r_gs_menubar_change_exit;
    cba = R_GS_SOFTKEYS_OPTIONS_BACK_CHANGE;
    }


//----------------------------------------------------
//
//    r_net_lbx_resource
//    Network sub-menu's listbox
//
//
//----------------------------------------------------
//
RESOURCE LISTBOX r_net_lbx_resource
    {
    array_id = r_net_lbx;
    flags = EEikListBoxMultipleSelection;
    }

//----------------------------------------------------
//
//    r_net_lbx
//    Items in cellular network-folder
//
//----------------------------------------------------
//
RESOURCE ARRAY r_net_lbx
    {
    items =
        {
        GS_FEATURE
            {
            txt = " \t"qtn_set_network_mode"\t\t";
            item = EGSNetworkModeItemId;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            txt = " \t"qtn_netsl_netselect"\t\t";
            item = EGSNetworkModeSelectionItemId;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            txt = " \t"qtn_mcn_control"\t\t";
            item = EGSMCNItemId;
            }
        };
    }

//----------------------------------------------------
//
//    r_setting_page
//    Setting page for Network selection mode/MCN items
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_setting_page
    {
    number = EAknSettingPageNoOrdinalDisplayed;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type =  EAknSetListBox;
    editor_resource_id= r_setting_listbox;
    }

//----------------------------------------------------
//
//    r_netsl_netselectmode
//    Network selection mode setting page
//
//----------------------------------------------------
//
RESOURCE TBUF r_netsl_netselectmode
    {
    buf = qtn_netsl_netselectmode;
    }


//----------------------------------------------------
//
//    r_netsl_netselectmode_lbx
//    Item in Network selection setting page
//
//----------------------------------------------------
//
RESOURCE GS_FEATURE_ARRAY r_netsl_netselectmode_lbx
    {
    items =
        {
        GS_FEATURE
            {
            txt = qtn_netsl_automatic;
            item = EGSAutomaticSelectMode;
            },
        GS_FEATURE
            {
            txt = qtn_netsl_manual;
            item = EGSManualSelectMode;
            }
        };
    }


//----------------------------------------------------
//
// r_confirm_note_nwmode_string
//
//----------------------------------------------------
//
RESOURCE TBUF r_confirm_note_nwmode_string { buf = qtn_network_mode_note; }


//----------------------------------------------------
//
//    r_net_network_mode
//    Network mode selection ui setting page
//
//----------------------------------------------------
//
RESOURCE TBUF r_net_network_mode
    {
    buf = qtn_set_network_mode;
    }


//----------------------------------------------------
//
//    r_net_network_mode_lbx
//    Network mode selection ui setting page items
//
//----------------------------------------------------
//
RESOURCE GS_FEATURE_ARRAY r_net_network_mode_lbx
    {
    items =
        {
        GS_FEATURE
            {
            txt = qtn_network_mode_dual;
            item = EGSNetworkModeDualmode;
            },
        GS_FEATURE
            {
            txt = qtn_network_mode_umts;
            item = EGSNetworkModeUMTS;
            type = EGSListBoxItemTypeIsDynamic;
            },
        GS_FEATURE
            {
            txt = qtn_network_mode_gsm;
            item = EGSNetworkModeGSM;
            type = EGSListBoxItemTypeIsDynamic;
            }
        };
    }

//----------------------------------------------------
//
//    r_netsl_foundoperators
//    Title for found network operators
//
//----------------------------------------------------
//
RESOURCE TBUF r_netsl_foundoperators
    {
    buf = qtn_netsl_foundoperators;
    }

//----------------------------------------------------
//
//      r_no_network_found
//      Texts for note wrappers.
//
//----------------------------------------------------
//
RESOURCE TBUF r_no_network_found
    {
    buf = text_no_networks_found;
    }

//----------------------------------------------------
//
//      r_ongoing_call
//      Texts for note wrappers.
//
//----------------------------------------------------
//
RESOURCE TBUF r_ongoing_call
    {
    buf = text_call_in_progress;
    }

//----------------------------------------------------
//
//      r_active_gprs_conn_note
//      Texts for note wrappers.
//
//----------------------------------------------------
//
RESOURCE TBUF r_active_gprs_conn_note
    {
    buf = qtn_mcn_info_not_received;
    }

//----------------------------------------------------
//
//    r_searching_note
//    Note layout when searching for network operators
//
//----------------------------------------------------
//
RESOURCE DIALOG r_searching_note
    {
    flags = EAknWaitNoteFlags|EEikDialogFlagWait;

    buttons = r_softkeys_empty_quit;
    items =
        {
        DLG_LINE
            {
            type = EAknCtNote;
            id = ESearchingNote;
            control = AVKON_NOTE
                {
                layout = EWaitLayout;
                singular_label = text_searching;
                animation = R_QGN_GRAF_WAIT_BAR_ANIM;
                };
            }
        };
    }

//----------------------------------------------------
//
//    r_home_network_selected
//    Text when home network selected.
//
//----------------------------------------------------
//
RESOURCE TBUF r_home_network_selected { buf = text_hplmn_selected; }

//----------------------------------------------------
//
//    r_network_selected,
//    r_netsl_networkselected
//    Note layout when non-home network selected
//
//----------------------------------------------------
//
RESOURCE TBUF r_netsl_networkselected { buf = qtn_netsl_networkselected; }

//----------------------------------------------------
//
//    r_no_network_access,
//    Text to be used, when access to network is denied.
//
//----------------------------------------------------
//
RESOURCE TBUF r_no_network_access { buf = text_no_access; }

//----------------------------------------------------
//
//    r_offline_mode,
//    Text to be used, when nw operation tried in offline mode.
//
//----------------------------------------------------
//
RESOURCE TBUF  r_offline_mode { buf = qtn_offline_not_possible; }

//----------------------------------------------------
//
//    r_registration_interrupted,
//    Note layout when network registration is
//    interrupted
//
//----------------------------------------------------
//
RESOURCE DIALOG r_registration_interrupted
    {
    flags = EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar |
            EEikDialogFlagCbaButtons | EEikDialogFlagWait;
    buttons = R_AVKON_SOFTKEYS_EMPTY;
    items =
        {
        DLG_LINE
            {
            type = EAknCtNote;
            id = ENwRegistrationInterrupted;
            control = AVKON_NOTE
                {
                layout = EGeneralLayout;
                singular_label = qtn_netsl_registration_interrup;
                animation = R_QGN_NOTE_ERROR_ANIM;
                };
            }
        };
    }


//----------------------------------------------------
//
//    r_mcn_cell_info_disp_mode
//    MCN setting page
//
//----------------------------------------------------
//
RESOURCE TBUF r_mcn_cell_info_disp_mode
    {
    buf = qtn_mcn_control;
    }


//----------------------------------------------------
//
//    r_mcn_cell_info_disp_mode_lbx
//    Items in setting page - MCN
//
//----------------------------------------------------
//
RESOURCE GS_FEATURE_ARRAY r_mcn_cell_info_disp_mode_lbx
    {
    items =
        {
        GS_FEATURE
            {
            txt = qtn_mcn_sett_on;
            item = EGSMcnSetOn;
            },
        GS_FEATURE
            {
            txt = qtn_mcn_sett_off;
            item = EGSMcnSetOff;
            }
        };
    }

//----------------------------------------------------
// Icon array for Dual mode nw selection
//----------------------------------------------------
//
RESOURCE AKN_ICON_ARRAY r_net_dualmode_icons
    {
    bmpfile = KGsNetworkPluginIcons;

    icons =
        {
        AKN_ICON
            {
            iconId = EMbmGsnetworkpluginQgn_prop_network_3g;
            maskId = EMbmGsnetworkpluginQgn_prop_network_3g_mask;
            },
        AKN_ICON
            {
            iconId = EMbmGsnetworkpluginQgn_prop_network_2g;
            maskId = EMbmGsnetworkpluginQgn_prop_network_2g_mask;
            },
        // forbidden operator icon
        AKN_ICON
            {
            iconId = EMbmGsnetworkpluginQgn_prop_nfc_sess_closed;
            maskId = EMbmGsnetworkpluginQgn_prop_nfc_sess_closed_mask;
            }
        };
    }

//----------------------------------------------------
//
//    r_softkeys_empty_quit
//    Softkeys for requesting notes: empty-quit
//
//----------------------------------------------------
//
RESOURCE CBA r_softkeys_empty_quit
    {
    buttons =
        {
        CBA_BUTTON {txt = "";},
        CBA_BUTTON {id = EGSSoftkeyQuit; txt = text_softkey_quit;}
        };
    }

//----------------------------------------------------
//
//    r_requesting_note
//    Note layout when requesting something from network
//
//----------------------------------------------------
//
RESOURCE DIALOG r_requesting_note
    {
    flags = EEikDialogFlagNoDrag | EEikDialogFlagNoTitleBar |
            EEikDialogFlagCbaButtons | EEikDialogFlagWait;
    buttons = r_softkeys_empty_quit;
    items =
        {
        DLG_LINE
            {
            type = EAknCtNote;
            id = ERequestingNote;
            control = AVKON_NOTE
                {
                layout = EWaitLayout;
                singular_label = text_sending;
                animation = R_QGN_GRAF_WAIT_BAR_ANIM;
                };
            }
        };
    }
    
// -----------------------------------------------------------------------------
//   
//    r_call_msk_change
//    Middle softkey label: change.
//
// -----------------------------------------------------------------------------
//    
RESOURCE TBUF r_call_msk_change
    {
    buf = qtn_msk_change;
    }

// -----------------------------------------------------------------------------
//   
//    qtn_cp_detail_cellular_operational
//    Network operational text in lbx item.
//
// -----------------------------------------------------------------------------
//    
/*
RESOURCE TBUF r_cellular_operational
    {
    buf = qtn_cp_detail_cellular_operational;
    }
*/
// -----------------------------------------------------------------------------
//   
//    qtn_cp_detail_cellular_offline
//    Network off-line text in lbx item.
//
// -----------------------------------------------------------------------------
//    
RESOURCE TBUF r_cellular_offline
    {
    buf = qtn_cp_detail_cellular_offline;
    }

//----------------------------------------------------
//   
//    r_gs_power_saving_protected_settings_infonote
//
//----------------------------------------------------
//
RESOURCE TBUF r_gs_power_saving_protected_settings_infonote
    {
    buf = qtn_power_saving_protected_settings_infonote;
    }

//End of file
