/*
* Copyright (c) 2005 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  Resource file for GsDataCallPlugin
*
*/



//  RESOURCE IDENTIFIER
NAME    DCAL // 4 letter ID

//  INCLUDES
#include    "GsDataCallPlugin.hrh"
#include    <gsdatacallplugin.loc>

#include    <gs.loc>
#include    <gscommon.rh>
#include    <appinfo.rh>
#include    <avkon.loc>
#include    <avkon.mbg>
#include    <avkon.rsg>
#include    <AvkonIcons.hrh>
#include    <bldvariant.hrh>
#include    <data_caging_paths_strings.hrh>
#include    <eikcore.rsg>
#include    <eikon.rsg>
#include    <uikon.rh>
#include    <gsapp.rsg>

// CONSTANTS

//  RESOURCE DEFINITIONS

RESOURCE RSS_SIGNATURE
    {
    }

// Common resources among GS
#include    "gscommonresources.rss"

RESOURCE TBUF
    {
    buf="DCAL";
    }

//----------------------------------------------------
//
//    EIK_APP_INFO
//    It contains application information.
//
//----------------------------------------------------
//
RESOURCE EIK_APP_INFO
    {
    }


//----------------------------------------------------
//  r_gs_datacall_view_caption
//
// Data call view caption for plugin
//----------------------------------------------------
//
RESOURCE TBUF r_gs_datacall_view_caption
    {
    buf = qtn_set_folder_conn_data_call;
    }


// ** DATA CALL (CONNECTION) VIEW

//----------------------------------------------------
//
//    r_gs_csd_view_title
//    Data call view's title.
//
//----------------------------------------------------
//
RESOURCE TITLE_PANE r_gs_csd_view_title
    {
    txt = qtn_set_title_settings_csd;
    }

//----------------------------------------------------
//
//    r_gs_dcall_view
//    Data call view.
//
//----------------------------------------------------
//
RESOURCE AVKON_VIEW r_gs_dcall_view
    {
    menubar = r_gs_menubar_change_exit;
    cba = R_GS_SOFTKEYS_OPTIONS_BACK_CHANGE;
    }


//----------------------------------------------------
//
//    r_dcall_lbx
//    Data call view's listbox.
//
//----------------------------------------------------
//
RESOURCE GS_FEATURE_ARRAY r_dcall_lbx
    {
    items =
        {
        GS_FEATURE
            {
            txt = " \t"qtn_set_autodiscon"\t\t";
            item = KGSSettIdAutodiscon;
            }
        };
    }



// AUTODISCONNECT TIME

//----------------------------------------------------
//
//    r_autodiscon_time_setting_page
//    Autodisconnect setting page.
//
//----------------------------------------------------
//
RESOURCE AVKON_SETTING_PAGE r_autodiscon_time_setting_page
    {
    number = EAknSettingPageNoOrdinalDisplayed;
    label = qtn_set_autodiscon;
    softkey_resource = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    type = EAknSetListBox;
    editor_resource_id = r_setting_listbox;
    }

//----------------------------------------------------
//
//    r_autodiscon_time_setting_page_lbx
//    Autodisconnect setting page's listbox.
//
//----------------------------------------------------
//
RESOURCE ARRAY r_autodiscon_time_setting_page_lbx
    {
    items =
        {
        LBUF
            {
            txt = qtn_set_autodiscon_defined;
            },
        LBUF
            {
            txt = qtn_set_autodiscon_no;
            }
        };
    }

//----------------------------------------------------
//
//    r_autodiscon_time_value_no
//    Text resource for autodisconnect setting.
//
//----------------------------------------------------
//
RESOURCE TBUF r_autodiscon_value_no
    {
    buf = qtn_set_autodiscon_no;
    }

//----------------------------------------------------
//
//    r_autodiscon_time_value_1min
//    Text resource for autodisconnect setting.
//
//----------------------------------------------------
//
RESOURCE TBUF r_autodiscon_value_1min
    {
    buf = qtn_set_autodiscon_one_min;
    }

//----------------------------------------------------
//
//    r_autodiscon_time_value_min
//    Text resource for autodisconnect setting.
//
//----------------------------------------------------
//
RESOURCE TBUF r_autodiscon_value_min
    {
    buf = qtn_set_autodiscon_min;
    }

//----------------------------------------------------
//
//    r_autodiscon_time_number_query
//    Autodisconnect time query.
//
//----------------------------------------------------
//
RESOURCE DIALOG r_autodiscon_time_number_query
    {
    flags = EGeneralQueryFlags;
    buttons = R_AVKON_SOFTKEYS_OK_CANCEL__OK;
    items =
        {
        DLG_LINE
            {
            type = EAknCtQuery;
            id = EGeneralQuery;
            control = AVKON_DATA_QUERY
                {
                layout = ENumberLayout;
                label = qtn_set_autodiscon_define_time;
                control = AVKON_INTEGER_EDWIN
                    {
                    min = 0;
                    max = 99;
                    maxlength = 2;
                    };
                };
            }
        };
    }


//End of File
